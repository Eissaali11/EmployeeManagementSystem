"""
وحدة إنشاء إشعار راتب كملف PDF
استخدام FPDF لإنشاء ملفات PDF مع دعم للنصوص العربية
"""
from datetime import datetime
from utils.simple_pdf_generator import create_vehicle_handover_pdf

def generate_salary_notification_pdf(salary):
    """
    إنشاء إشعار راتب لموظف كملف PDF
    
    Args:
        salary: كائن Salary يحتوي على بيانات الراتب
        
    Returns:
        bytes يحتوي على ملف PDF
    """
    try:
        # التأكد من تحويل الشهر إلى عدد صحيح
        month = int(salary.month) if not isinstance(salary.month, int) else salary.month
        
        # الحصول على اسم الشهر بالعربية
        month_names = {
            1: 'يناير', 2: 'فبراير', 3: 'مارس', 4: 'أبريل',
            5: 'مايو', 6: 'يونيو', 7: 'يوليو', 8: 'أغسطس',
            9: 'سبتمبر', 10: 'أكتوبر', 11: 'نوفمبر', 12: 'ديسمبر'
        }
        month_name = month_names.get(month, str(month))
        
        # تحضير البيانات للقالب مع التأكد من تحويل جميع البيانات إلى قاموس
        # لتجنب استخدام salary.get() الذي يسبب الخطأ 'Salary' object has no attribute 'get'
        data = {}
        
        # معلومات الموظف
        data['employee_name'] = str(salary.employee.name)
        data['employee_id'] = str(salary.employee.employee_id)
        data['job_title'] = str(salary.employee.job_title)
        data['department_name'] = str(salary.employee.department.name) if salary.employee.department else ''
        
        # معلومات الراتب
        data['month_name'] = str(month_name)
        data['year'] = str(salary.year) if isinstance(salary.year, (int, float)) else salary.year
        data['basic_salary'] = float(salary.basic_salary)
        data['allowances'] = float(salary.allowances)
        data['bonus'] = float(salary.bonus)
        data['deductions'] = float(salary.deductions)
        data['net_salary'] = float(salary.net_salary)
        data['notes'] = str(salary.notes) if salary.notes else ''
        data['current_date'] = datetime.now().strftime('%Y-%m-%d')
        
        # إنشاء كائن وهمي لتمرير البيانات لمولد PDF
        title = f"إشعار راتب {data['employee_name']} - {data['month_name']} {data['year']}"
        vehicle_obj = type('obj', (object,), {
            'plate_number': title,
            'make': 'نُظم',
            'model': 'إشعار راتب',
            'year': salary.year,
            'color': 'N/A'
        })()
        
        handover_data = type('obj', (object,), {
            'id': f"salary-{salary.id}",
            'vehicle_rel': vehicle_obj,
            'handover_date': datetime.strptime(f"{salary.year}-{month:02d}-01", '%Y-%m-%d'),
            'handover_type': 'delivery',
            'person_name': data['employee_name'],
            'person_mobile': salary.employee.mobile if hasattr(salary.employee, 'mobile') else '',
            'mileage': 0,
            'fuel_level': 'N/A',
            'has_spare_tire': True,
            'has_fire_extinguisher': True,
            'has_first_aid_kit': True,
            'has_warning_triangle': True,
            'has_tools': True,
            'form_link': f"salary-{salary.id}",
            'notes': f"الراتب الأساسي: {data['basic_salary']}\nالبدلات: {data['allowances']}\nالمكافآت: {data['bonus']}\nالخصومات: {data['deductions']}\nصافي الراتب: {data['net_salary']}"
        })()
        
        # استدعاء مولد PDF المتاح
        return create_vehicle_handover_pdf(handover_data)
        
    except Exception as e:
        print(f"خطأ في إنشاء إشعار الراتب: {str(e)}")
        raise Exception(f"خطأ في إنشاء إشعار الراتب: {str(e)}")


def generate_batch_salary_notifications(department_id=None, month=None, year=None):
    """
    إنشاء إشعارات رواتب مجمعة لموظفي قسم معين أو لكل الموظفين
    
    Args:
        department_id: معرف القسم (اختياري)
        month: رقم الشهر (إلزامي)
        year: السنة (إلزامي)
        
    Returns:
        قائمة بأسماء الموظفين الذين تم إنشاء إشعارات لهم
    """
    from models import Salary, Employee
    
    # التأكد من تحويل البيانات إلى النوع المناسب
    month = int(month) if month is not None and not isinstance(month, int) else month
    year = int(year) if year is not None and not isinstance(year, int) else year
    department_id = int(department_id) if department_id is not None and not isinstance(department_id, int) else department_id
    
    # بناء الاستعلام
    salary_query = Salary.query.filter_by(month=month, year=year)
    
    # إذا تم تحديد قسم معين
    if department_id:
        employees = Employee.query.filter_by(department_id=department_id).all()
        employee_ids = [emp.id for emp in employees]
        salary_query = salary_query.filter(Salary.employee_id.in_(employee_ids))
        
    # تنفيذ الاستعلام
    salaries = salary_query.all()
    
    # قائمة بأسماء الموظفين الذين تم إنشاء إشعارات لهم
    processed_employees = []
    
    # إنشاء إشعار لكل موظف
    for salary in salaries:
        try:
            # إنشاء إشعار وإضافة اسم الموظف إلى القائمة
            generate_salary_notification_pdf(salary)
            processed_employees.append(salary.employee.name)
        except Exception as e:
            # تسجيل الخطأ
            print(f"خطأ في إنشاء إشعار للموظف {salary.employee.name}: {str(e)}")
            
    return processed_employees