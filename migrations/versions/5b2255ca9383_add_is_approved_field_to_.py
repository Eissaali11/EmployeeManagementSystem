"""Add is_approved field to VehicleHandover table

Revision ID: 5b2255ca9383
Revises: 0b2e946f9f83
Create Date: 2025-07-31 01:21:04.412052

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5b2255ca9383'
down_revision = '0b2e946f9f83'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('government_fee')
    op.drop_table('company_subscriptions')
    op.drop_table('companies')
    op.drop_table('company_permissions')
    op.drop_table('user_department_access')
    op.drop_table('vehicle_workshop_images')
    op.drop_table('projects')
    op.drop_table('subscription_notifications')
    op.drop_table('vehicles')
    with op.batch_alter_table('attendance', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('attendance_company_id_fkey'), type_='foreignkey')
        batch_op.drop_column('company_id')

    with op.batch_alter_table('audit_log', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('department', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('department_company_id_fkey'), type_='foreignkey')
        batch_op.drop_column('company_id')

    with op.batch_alter_table('device_assignments', schema=None) as batch_op:
        batch_op.alter_column('employee_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_constraint(batch_op.f('device_assignments_sim_id_fkey'), type_='foreignkey')
        batch_op.drop_column('sim_id')

    with op.batch_alter_table('employee', schema=None) as batch_op:
        batch_op.alter_column('contract_status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.alter_column('license_status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.drop_constraint(batch_op.f('employee_company_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key('fk_employee_nationality_id', 'nationalities', ['nationality_id'], ['id'])
        batch_op.drop_column('company_id')

    with op.batch_alter_table('mobile_devices', schema=None) as batch_op:
        batch_op.alter_column('assignment_type',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'employee'::character varying"))
        batch_op.alter_column('is_assigned',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))

    with op.batch_alter_table('salary', schema=None) as batch_op:
        batch_op.alter_column('overtime_hours',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
        batch_op.drop_constraint(batch_op.f('salary_company_id_fkey'), type_='foreignkey')
        batch_op.drop_column('company_id')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('user_parent_user_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('user_company_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('user_created_by_fkey'), type_='foreignkey')
        batch_op.drop_column('company_id')
        batch_op.drop_column('created_by')
        batch_op.drop_column('parent_user_id')
        batch_op.drop_column('user_type')

    with op.batch_alter_table('vehicle', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_vehicle_make'))
        batch_op.drop_index(batch_op.f('idx_vehicle_plate'))
        batch_op.drop_index(batch_op.f('idx_vehicle_status'))
        batch_op.drop_constraint(batch_op.f('vehicle_company_id_fkey'), type_='foreignkey')
        batch_op.drop_column('authorization_end_date')
        batch_op.drop_column('authorization_notes')
        batch_op.drop_column('authorized_by')
        batch_op.drop_column('authorization_conditions')
        batch_op.drop_column('company_id')
        batch_op.drop_column('authorization_start_date')
        batch_op.drop_column('authorization_status')

    with op.batch_alter_table('vehicle_handover', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_approved', sa.Boolean(), nullable=False))
        batch_op.alter_column('vehicle_status_summary',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('authorization_details',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('fuel_level',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               nullable=False)
        batch_op.alter_column('has_oil_leaks',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_gear_issue',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_clutch_issue',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_engine_issue',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_windows_issue',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_tires_issue',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_body_issue',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_electricity_issue',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_lights_issue',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_ac_issue',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('movement_officer_name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('custom_company_name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.create_index(batch_op.f('ix_vehicle_handover_is_approved'), ['is_approved'], unique=False)

    with op.batch_alter_table('vehicle_handover_image', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'vehicle_handover', ['handover_record_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('vehicle_periodic_inspection', schema=None) as batch_op:
        batch_op.alter_column('result',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=20),
               existing_nullable=True)
        batch_op.alter_column('inspection_number',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('inspection_type',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=True)

    with op.batch_alter_table('vehicle_project', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_vehicle_project_is_active'))
        batch_op.drop_index(batch_op.f('idx_vehicle_project_vehicle_id'))

    with op.batch_alter_table('vehicle_rental', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_vehicle_rental_is_active'))
        batch_op.drop_index(batch_op.f('idx_vehicle_rental_vehicle_id'))
        batch_op.drop_constraint(batch_op.f('vehicle_rental_company_id_fkey'), type_='foreignkey')
        batch_op.drop_column('company_id')

    with op.batch_alter_table('vehicle_user_access', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('vehicle_user_access_created_by_fkey'), type_='foreignkey')
        batch_op.drop_column('created_at')
        batch_op.drop_column('created_by')

    with op.batch_alter_table('vehicle_workshop', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_vehicle_workshop_entry_date'))
        batch_op.drop_index(batch_op.f('idx_vehicle_workshop_reason'))
        batch_op.drop_index(batch_op.f('idx_vehicle_workshop_vehicle_id'))
        batch_op.drop_column('status')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('vehicle_workshop', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'in_progress'::character varying"), autoincrement=False, nullable=True))
        batch_op.create_index(batch_op.f('idx_vehicle_workshop_vehicle_id'), ['vehicle_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_vehicle_workshop_reason'), ['reason'], unique=False)
        batch_op.create_index(batch_op.f('idx_vehicle_workshop_entry_date'), ['entry_date'], unique=False)

    with op.batch_alter_table('vehicle_user_access', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('vehicle_user_access_created_by_fkey'), 'user', ['created_by'], ['id'])

    with op.batch_alter_table('vehicle_rental', schema=None) as batch_op:
        batch_op.add_column(sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('vehicle_rental_company_id_fkey'), 'companies', ['company_id'], ['id'])
        batch_op.create_index(batch_op.f('idx_vehicle_rental_vehicle_id'), ['vehicle_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_vehicle_rental_is_active'), ['is_active'], unique=False)

    with op.batch_alter_table('vehicle_project', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_vehicle_project_vehicle_id'), ['vehicle_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_vehicle_project_is_active'), ['is_active'], unique=False)

    with op.batch_alter_table('vehicle_periodic_inspection', schema=None) as batch_op:
        batch_op.alter_column('inspection_type',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
        batch_op.alter_column('inspection_number',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
        batch_op.alter_column('result',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)

    with op.batch_alter_table('vehicle_handover_image', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('vehicle_handover', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_vehicle_handover_is_approved'))
        batch_op.alter_column('custom_company_name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('movement_officer_name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('has_ac_issue',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_lights_issue',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_electricity_issue',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_body_issue',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_tires_issue',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_windows_issue',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_engine_issue',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_clutch_issue',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_gear_issue',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('has_oil_leaks',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('fuel_level',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('authorization_details',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('vehicle_status_summary',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.drop_column('is_approved')

    with op.batch_alter_table('vehicle', schema=None) as batch_op:
        batch_op.add_column(sa.Column('authorization_status', sa.VARCHAR(length=50), server_default=sa.text("'none'::character varying"), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('authorization_start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('authorization_conditions', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('authorized_by', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('authorization_notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('authorization_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('vehicle_company_id_fkey'), 'companies', ['company_id'], ['id'])
        batch_op.create_index(batch_op.f('idx_vehicle_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_vehicle_plate'), ['plate_number'], unique=False)
        batch_op.create_index(batch_op.f('idx_vehicle_make'), ['make'], unique=False)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_type', postgresql.ENUM('SYSTEM_ADMIN', 'COMPANY_ADMIN', 'EMPLOYEE', name='usertype'), server_default=sa.text("'EMPLOYEE'::usertype"), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('parent_user_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('user_created_by_fkey'), 'user', ['created_by'], ['id'])
        batch_op.create_foreign_key(batch_op.f('user_company_id_fkey'), 'companies', ['company_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('user_parent_user_id_fkey'), 'user', ['parent_user_id'], ['id'])

    with op.batch_alter_table('salary', schema=None) as batch_op:
        batch_op.add_column(sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('salary_company_id_fkey'), 'companies', ['company_id'], ['id'])
        batch_op.alter_column('overtime_hours',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))

    with op.batch_alter_table('mobile_devices', schema=None) as batch_op:
        batch_op.alter_column('is_assigned',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('assignment_type',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'employee'::character varying"))

    with op.batch_alter_table('employee', schema=None) as batch_op:
        batch_op.add_column(sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.drop_constraint('fk_employee_nationality_id', type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('employee_company_id_fkey'), 'companies', ['company_id'], ['id'])
        batch_op.alter_column('license_status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
        batch_op.alter_column('contract_status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)

    with op.batch_alter_table('device_assignments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('sim_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('device_assignments_sim_id_fkey'), 'sim_cards', ['sim_id'], ['id'], ondelete='SET NULL')
        batch_op.alter_column('employee_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('department', schema=None) as batch_op:
        batch_op.add_column(sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('department_company_id_fkey'), 'companies', ['company_id'], ['id'])

    with op.batch_alter_table('audit_log', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('attendance', schema=None) as batch_op:
        batch_op.add_column(sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('attendance_company_id_fkey'), 'companies', ['company_id'], ['id'])

    op.create_table('vehicles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('plate_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('make', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('model', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('vehicles_pkey'))
    )
    op.create_table('subscription_notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_urgent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sent_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('subscription_notifications_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('subscription_notifications_pkey'))
    )
    op.create_table('projects',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('manager_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['manager_id'], ['employee.id'], name=op.f('projects_manager_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('projects_pkey')),
    sa.UniqueConstraint('name', name=op.f('projects_name_key'))
    )
    op.create_table('vehicle_workshop_images',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workshop_record_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('image_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('image_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['workshop_record_id'], ['vehicle_workshop.id'], name=op.f('vehicle_workshop_images_workshop_record_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('vehicle_workshop_images_pkey'))
    )
    op.create_table('user_department_access',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('department_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['department.id'], name=op.f('user_department_access_department_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('user_department_access_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_department_access_pkey'))
    )
    op.create_table('company_permissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('module_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('permissions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('company_permissions_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('company_permissions_pkey'))
    )
    op.create_table('companies',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('companies_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('contact_email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('contact_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_trial', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('trial_start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('trial_end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('trial_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trial_extended', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('subscription_start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('subscription_end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('subscription_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('subscription_plan', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('max_users', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_employees', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_vehicles', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_departments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('monthly_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('next_payment_due', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='companies_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('company_subscriptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('plan_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_trial', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('trial_start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('trial_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('auto_renew', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('company_subscriptions_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('company_subscriptions_pkey'))
    )
    op.create_table('government_fee',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fee_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fee_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('payment_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_automatic', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('insurance_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('has_national_balance', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('receipt_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transfer_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['document.id'], name=op.f('government_fee_document_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], name=op.f('government_fee_employee_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('government_fee_pkey'))
    )
    # ### end Alembic commands ###
