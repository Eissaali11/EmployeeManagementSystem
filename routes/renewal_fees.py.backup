from datetime import datetime
from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from sqlalchemy import func, extract
from app import db
from models import RenewalFee, Document, Employee, Department, SystemAudit

renewal_fees_bp = Blueprint('renewal_fees', __name__, url_prefix='/renewal-fees')

@renewal_fees_bp.route('/')
def index():
    """عرض قائمة رسوم تجديد الأوراق مع خيارات التصفية"""
    # خيارات الفلترة
    fee_type = request.args.get('fee_type')
    payment_status = request.args.get('payment_status')
    department_id = request.args.get('department_id')
    month = request.args.get('month')
    year = request.args.get('year')
    
    # بناء الاستعلام
    query = RenewalFee.query.join(Document).join(Employee)
    
    # تطبيق الفلاتر
    if fee_type:
        query = query.filter(RenewalFee.fee_type == fee_type)
    
    if payment_status:
        query = query.filter(RenewalFee.payment_status == payment_status)
    
    if department_id and department_id.isdigit():
        query = query.filter(Employee.department_id == int(department_id))
    
    if month and month.isdigit():
        query = query.filter(extract('month', RenewalFee.fee_date) == int(month))
    
    if year and year.isdigit():
        query = query.filter(extract('year', RenewalFee.fee_date) == int(year))
    
    # تنفيذ الاستعلام
    fees = query.order_by(RenewalFee.fee_date.desc()).all()
    
    # الحصول على قائمة الأقسام للفلترة
    departments = Department.query.all()
    
    # إحصائيات
    total_fees = query.with_entities(func.sum(RenewalFee.amount)).scalar() or 0
    pending_fees = query.filter(RenewalFee.payment_status == 'pending').with_entities(func.sum(RenewalFee.amount)).scalar() or 0
    paid_fees = query.filter(RenewalFee.payment_status == 'paid').with_entities(func.sum(RenewalFee.amount)).scalar() or 0
    
    fee_types = {
        "passport": "الجوازات",
        "labor_office": "مكتب العمل",
        "insurance": "التأمين",
        "social_insurance": "التأمينات الاجتماعية",
        "transfer_sponsorship": "نقل كفالة",
        "other": "رسوم أخرى" } }
    
    payment_statuses = {
        'pending': 'قيد الانتظار',
        'paid': 'مدفوع',
        'overdue': 'متأخر'
    }
    
    # بيانات للرسم البياني
    fee_type_stats = db.session.query(
        RenewalFee.fee_type,
        func.sum(RenewalFee.amount).label('total_amount')
    ).group_by(RenewalFee.fee_type).all()
    
    fee_type_data = {fee_type: 0 for fee_type in fee_types.keys()}
    for fee_type, amount in fee_type_stats:
        fee_type_data[fee_type] = amount
    
    return render_template('renewal_fees/index.html',
                          fees=fees,
                          departments=departments,
                          fee_types=fee_types,
                          payment_statuses=payment_statuses,
                          fee_type=fee_type,
                          payment_status=payment_status,
                          department_id=department_id,
                          month=month,
                          year=year,
                          total_fees=total_fees,
                          pending_fees=pending_fees,
                          paid_fees=paid_fees,
                          fee_type_data=fee_type_data)

@renewal_fees_bp.route('/create', methods=['GET', 'POST'])
def create():
    """إنشاء رسم تجديد جديد"""
    if request.method == 'POST':
        try:
            # استلام البيانات من النموذج
            document_id = request.form.get('document_id')
            fee_date = request.form.get('fee_date')
            fee_type = request.form.get('fee_type')
            amount = request.form.get('amount')
            payment_status = request.form.get('payment_status', 'pending')
            payment_date = request.form.get('payment_date')
            receipt_number = request.form.get('receipt_number')
            transfer_number = request.form.get('transfer_number')
            notes = request.form.get('notes')
            
            # التحقق من البيانات
            if not all([document_id, fee_date, fee_type, amount]):
                flash('جميع الحقول المميزة بـ * مطلوبة', 'danger')
                return redirect(url_for('renewal_fees.create'))
            
            # تحويل التاريخ
            try:
                fee_date = datetime.strptime(fee_date, '%Y-%m-%d').date()
                if payment_date:
                    payment_date = datetime.strptime(payment_date, '%Y-%m-%d').date()
                else:
                    payment_date = None
            except ValueError:
                flash('تنسيق التاريخ غير صحيح', 'danger')
                return redirect(url_for('renewal_fees.create'))
            
            # التحقق من وجود الوثيقة
            document = Document.query.get(document_id)
            if not document:
                flash('الوثيقة غير موجودة', 'danger')
                return redirect(url_for('renewal_fees.create'))
            
            # إنشاء سجل جديد
            renewal_fee = RenewalFee(
                document_id=document_id,
                fee_date=fee_date,
                fee_type=fee_type,
                amount=float(amount),
                payment_status=payment_status,
                payment_date=payment_date,
                receipt_number=receipt_number,
                transfer_number=transfer_number if fee_type == 'transfer_sponsorship' else None,
                notes=notes
            )
            
            db.session.add(renewal_fee)
            
            # إضافة سجل تدقيق
            audit = SystemAudit(
                action='create',
                entity_type='renewal_fee',
                entity_id=0,
                details=f'تم إنشاء رسم تجديد جديد للوثيقة رقم {document_id}'
            )
            db.session.add(audit)
            
            db.session.commit()
            
            # تحديث معرف السجل في تدقيق النظام
            audit.entity_id = renewal_fee.id
            db.session.commit()
            
            flash('تم إنشاء رسم التجديد بنجاح', 'success')
            return redirect(url_for('renewal_fees.index'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'حدث خطأ: {str(e)}', 'danger')
    
    # الحصول على قائمة الوثائق المتاحة
    documents = Document.query.join(Employee).all()
    
    fee_types = {
        "passport": "الجوازات",
        "labor_office": "مكتب العمل",
        "insurance": "التأمين",
        "social_insurance": "التأمينات الاجتماعية",
        "transfer_sponsorship": "نقل كفالة",
        "other": "رسوم أخرى" }
    }
    
    payment_statuses = {
        'pending': 'قيد الانتظار',
        'paid': 'مدفوع',
        'overdue': 'متأخر'
    }
    
    return render_template('renewal_fees/create.html',
                          documents=documents,
                          fee_types=fee_types,
                          payment_statuses=payment_statuses)

@renewal_fees_bp.route('/edit/<int:id>', methods=['GET', 'POST'])
def edit(id):
    """تعديل رسم تجديد موجود"""
    # الحصول على رسم التجديد
    renewal_fee = RenewalFee.query.get_or_404(id)
    
    if request.method == 'POST':
        try:
            # استلام البيانات من النموذج
            fee_date = request.form.get('fee_date')
            fee_type = request.form.get('fee_type')
            amount = request.form.get('amount')
            payment_status = request.form.get('payment_status')
            payment_date = request.form.get('payment_date')
            receipt_number = request.form.get('receipt_number')
            transfer_number = request.form.get('transfer_number')
            notes = request.form.get('notes')
            
            # التحقق من البيانات
            if not all([fee_date, fee_type, amount, payment_status]):
                flash('جميع الحقول المميزة بـ * مطلوبة', 'danger')
                return redirect(url_for('renewal_fees.edit', id=id))
            
            # تحويل التاريخ
            try:
                fee_date = datetime.strptime(fee_date, '%Y-%m-%d').date()
                if payment_date:
                    payment_date = datetime.strptime(payment_date, '%Y-%m-%d').date()
                else:
                    payment_date = None
            except ValueError:
                flash('تنسيق التاريخ غير صحيح', 'danger')
                return redirect(url_for('renewal_fees.edit', id=id))
            
            # تحديث الرسم
            renewal_fee.fee_date = fee_date
            renewal_fee.fee_type = fee_type
            renewal_fee.amount = float(amount)
            renewal_fee.payment_status = payment_status
            renewal_fee.payment_date = payment_date
            renewal_fee.receipt_number = receipt_number
            renewal_fee.transfer_number = transfer_number if fee_type == 'transfer_sponsorship' else None
            renewal_fee.notes = notes
            
            # إضافة سجل تدقيق
            audit = SystemAudit(
                action='update',
                entity_type='renewal_fee',
                entity_id=id,
                details=f'تم تحديث رسم التجديد للوثيقة رقم {renewal_fee.document_id}'
            )
            db.session.add(audit)
            
            db.session.commit()
            
            flash('تم تحديث رسم التجديد بنجاح', 'success')
            return redirect(url_for('renewal_fees.index'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'حدث خطأ: {str(e)}', 'danger')
    
    # استخراج التواريخ بتنسيق HTML
    if renewal_fee.fee_date:
        fee_date = renewal_fee.fee_date.strftime('%Y-%m-%d')
    else:
        fee_date = ''
        
    if renewal_fee.payment_date:
        payment_date = renewal_fee.payment_date.strftime('%Y-%m-%d')
    else:
        payment_date = ''
    
    fee_types = {
        "passport": "الجوازات",
        "labor_office": "مكتب العمل",
        "insurance": "التأمين",
        "social_insurance": "التأمينات الاجتماعية",
        "transfer_sponsorship": "نقل كفالة",
        "other": "رسوم أخرى" }
    
    payment_statuses = {
        'pending': 'قيد الانتظار',
        'paid': 'مدفوع',
        'overdue': 'متأخر'
    }
    
    return render_template('renewal_fees/edit.html',
                          renewal_fee=renewal_fee,
                          fee_date=fee_date,
                          payment_date=payment_date,
                          fee_types=fee_types,
                          payment_statuses=payment_statuses)

@renewal_fees_bp.route('/delete/<int:id>', methods=['POST'])
def delete(id):
    """حذف رسم تجديد"""
    try:
        renewal_fee = RenewalFee.query.get_or_404(id)
        
        document_id = renewal_fee.document_id
        
        # إضافة سجل تدقيق
        audit = SystemAudit(
            action='delete',
            entity_type='renewal_fee',
            entity_id=id,
            details=f'تم حذف رسم التجديد للوثيقة رقم {document_id}'
        )
        db.session.add(audit)
        
        # حذف الرسم
        db.session.delete(renewal_fee)
        db.session.commit()
        
        flash('تم حذف رسم التجديد بنجاح', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'حدث خطأ: {str(e)}', 'danger')
    
    return redirect(url_for('renewal_fees.index'))

@renewal_fees_bp.route('/document/<int:document_id>')
def document_fees(document_id):
    """عرض رسوم تجديد خاصة بوثيقة معينة"""
    document = Document.query.get_or_404(document_id)
    
    # الحصول على الرسوم المرتبطة بالوثيقة
    fees = RenewalFee.query.filter_by(document_id=document_id).order_by(RenewalFee.fee_date.desc()).all()
    
    fee_types = {
        "passport": "الجوازات",
        "labor_office": "مكتب العمل",
        "insurance": "التأمين",
        "social_insurance": "التأمينات الاجتماعية",
        "transfer_sponsorship": "نقل كفالة",
        "other": "رسوم أخرى" }
    
    payment_statuses = {
        'pending': 'قيد الانتظار',
        'paid': 'مدفوع',
        'overdue': 'متأخر'
    }
    
    return render_template('renewal_fees/document_fees.html',
                          document=document,
                          fees=fees,
                          fee_types=fee_types,
                          payment_statuses=payment_statuses)

@renewal_fees_bp.route('/stats')
def stats():
    """إحصائيات رسوم التجديد"""
    # إحصائيات حسب نوع الرسم
    fee_type_stats = db.session.query(
        RenewalFee.fee_type,
        func.count(RenewalFee.id).label('count'),
        func.sum(RenewalFee.amount).label('total_amount')
    ).group_by(RenewalFee.fee_type).all()
    
    # إحصائيات حسب حالة الدفع
    payment_status_stats = db.session.query(
        RenewalFee.payment_status,
        func.count(RenewalFee.id).label('count'),
        func.sum(RenewalFee.amount).label('total_amount')
    ).group_by(RenewalFee.payment_status).all()
    
    # إحصائيات حسب الشهر
    month_stats = db.session.query(
        extract('month', RenewalFee.fee_date).label('month'),
        extract('year', RenewalFee.fee_date).label('year'),
        func.count(RenewalFee.id).label('count'),
        func.sum(RenewalFee.amount).label('total_amount')
    ).group_by(
        extract('month', RenewalFee.fee_date),
        extract('year', RenewalFee.fee_date)
    ).order_by(
        extract('year', RenewalFee.fee_date),
        extract('month', RenewalFee.fee_date)
    ).all()
    
    # إحصائيات حسب القسم
    department_stats = db.session.query(
        Department.name,
        func.count(RenewalFee.id).label('count'),
        func.sum(RenewalFee.amount).label('total_amount')
    ).join(Document, Document.id == RenewalFee.document_id)\
      .join(Employee, Employee.id == Document.employee_id)\
      .join(Department, Department.id == Employee.department_id)\
      .group_by(Department.name).all()
    
    fee_types = {
        "passport": "الجوازات",
        "labor_office": "مكتب العمل",
        "insurance": "التأمين",
        "social_insurance": "التأمينات الاجتماعية",
        "transfer_sponsorship": "نقل كفالة",
        "other": "رسوم أخرى" }
    
    payment_statuses = {
        'pending': 'قيد الانتظار',
        'paid': 'مدفوع',
        'overdue': 'متأخر'
    }
    
    month_names = {
        1: 'يناير', 2: 'فبراير', 3: 'مارس', 4: 'أبريل',
        5: 'مايو', 6: 'يونيو', 7: 'يوليو', 8: 'أغسطس',
        9: 'سبتمبر', 10: 'أكتوبر', 11: 'نوفمبر', 12: 'ديسمبر'
    }
    
    # تجهيز البيانات للرسوم البيانية
    fee_type_labels = [fee_types[ft[0]] for ft in fee_type_stats]
    fee_type_counts = [ft[1] for ft in fee_type_stats]
    fee_type_amounts = [ft[2] for ft in fee_type_stats]
    
    payment_status_labels = [payment_statuses[ps[0]] for ps in payment_status_stats]
    payment_status_counts = [ps[1] for ps in payment_status_stats]
    payment_status_amounts = [ps[2] for ps in payment_status_stats]
    
    month_labels = [f"{month_names[ms[0]][:3]} {ms[1]}" for ms in month_stats]
    month_counts = [ms[2] for ms in month_stats]
    month_amounts = [ms[3] for ms in month_stats]
    
    department_labels = [ds[0] for ds in department_stats]
    department_counts = [ds[1] for ds in department_stats]
    department_amounts = [ds[2] for ds in department_stats]
    
    return render_template('renewal_fees/stats.html',
                          fee_type_stats=fee_type_stats,
                          payment_status_stats=payment_status_stats,
                          month_stats=month_stats,
                          department_stats=department_stats,
                          fee_types=fee_types,
                          payment_statuses=payment_statuses,
                          month_names=month_names,
                          fee_type_labels=fee_type_labels,
                          fee_type_counts=fee_type_counts,
                          fee_type_amounts=fee_type_amounts,
                          payment_status_labels=payment_status_labels,
                          payment_status_counts=payment_status_counts,
                          payment_status_amounts=payment_status_amounts,
                          month_labels=month_labels,
                          month_counts=month_counts,
                          month_amounts=month_amounts,
                          department_labels=department_labels,
                          department_counts=department_counts,
                          department_amounts=department_amounts)
