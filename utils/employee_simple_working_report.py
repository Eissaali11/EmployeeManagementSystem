"""
تقرير موظف بسيط يعمل بدون مشاكل
"""
from io import BytesIO
from fpdf import FPDF
from models import Employee, VehicleHandover, Vehicle


def generate_simple_employee_report(employee_id):
    """إنشاء تقرير موظف بسيط يعمل بدون مشاكل"""
    try:
        # البحث عن الموظف
        employee = Employee.query.get(employee_id)
        if not employee:
            return None, "Employee not found"
        
        # دالة تنظيف النص
        def safe_text(text):
            if not text:
                return "Not specified"
            try:
                # تحويل النص إلى ASCII فقط
                cleaned = str(text).encode('ascii', 'ignore').decode('ascii').strip()
                return cleaned if cleaned else "Not specified"
            except:
                return "Not specified"
        
        # إنشاء PDF
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        
        # العنوان
        title = f'EMPLOYEE BASIC REPORT'
        pdf.cell(190, 10, title, 0, 1, 'C')
        pdf.ln(5)
        
        # معلومات الموظف
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(190, 8, 'EMPLOYEE INFORMATION:', 0, 1)
        pdf.ln(2)
        
        pdf.set_font('Arial', '', 10)
        
        # البيانات الأساسية
        basic_info = [
            f'Name: {safe_text(employee.name)}',
            f'Employee ID: {safe_text(employee.employee_id)}',
            f'Mobile: {safe_text(employee.mobile)}',
            f'Email: {safe_text(employee.email)}',
            f'National ID: {safe_text(employee.national_id)}',
            f'Job Title: {safe_text(employee.job_title)}',
            f'Department: {safe_text(employee.department.name) if employee.department else "Not assigned"}',
            f'Status: {safe_text(employee.status)}',
            f'Join Date: {employee.join_date.strftime("%Y-%m-%d") if employee.join_date else "Not specified"}',
            f'Basic Salary: {employee.basic_salary if employee.basic_salary else "Not specified"}',
            f'Location: {safe_text(employee.location)}',
            f'Project: {safe_text(employee.project)}',
            f'Nationality: {safe_text(employee.nationality)}',
            f'Contract Type: {safe_text(employee.contract_type)}'
        ]
        
        # طباعة البيانات
        for info in basic_info:
            pdf.cell(190, 5, info, 0, 1)
        
        pdf.ln(5)
        
        # معلومات المركبات المرتبطة
        vehicles = VehicleHandover.query.filter_by(employee_id=employee.id).all()
        if vehicles:
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(190, 8, 'ASSIGNED VEHICLES:', 0, 1)
            pdf.ln(2)
            
            pdf.set_font('Arial', '', 10)
            for vh in vehicles:
                if vh.vehicle:
                    vehicle_info = f'Vehicle: {safe_text(vh.vehicle.plate_number)} - {safe_text(vh.vehicle.make)} {safe_text(vh.vehicle.model)}'
                    pdf.cell(190, 5, vehicle_info, 0, 1)
                    if vh.handover_date:
                        pdf.cell(190, 5, f'  Handover Date: {vh.handover_date.strftime("%Y-%m-%d")}', 0, 1)
        
        pdf.ln(5)
        
        # معلومات النظام
        pdf.set_font('Arial', 'I', 8)
        from datetime import datetime
        pdf.cell(190, 5, f'Report generated on: {datetime.now().strftime("%Y-%m-%d %H:%M")}', 0, 1)
        pdf.cell(190, 5, 'Generated by: Nuzum Employee Management System', 0, 1)
        
        # إنشاء الـ PDF
        pdf_content = pdf.output(dest='S')
        
        # التعامل مع أنواع الإخراج المختلفة
        if isinstance(pdf_content, str):
            pdf_content = pdf_content.encode('latin-1', errors='ignore')
        elif isinstance(pdf_content, bytearray):
            pdf_content = bytes(pdf_content)
        
        return pdf_content, None
        
    except Exception as e:
        print(f"Error in simple employee report: {str(e)}")
        import traceback
        traceback.print_exc()
        return None, str(e)